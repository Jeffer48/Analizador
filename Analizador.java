/* Generated By:JavaCC: Do not edit this line. Analizador.java */
    public class Analizador implements AnalizadorConstants {
        public static void main(String args[]) throws ParseException {
            Analizador analizador = new Analizador(System.in);
            analizador.Inicio();

    }

  static final public void Inicio() throws ParseException {
    label_1:
    while (true) {
      program();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Void:
      case Int:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void program() throws ParseException {
    declarationlist();
  }

  static final public void declarationlist() throws ParseException {
    declaration();
    declarationlistPrima();
  }

  static final public void declarationlistPrima() throws ParseException {
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      declaration();
      declarationlistPrima();
    }
  }

  static final public void declaration() throws ParseException {
    if (jj_2_2(3)) {
      vardeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Void:
      case Int:
        fundeclaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void vardeclaration() throws ParseException {
    typespecifer();
    jj_consume_token(ID);
    vardeclarationPre();
  }

  static final public void vardeclarationPre() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNCOMA:
      jj_consume_token(PUNCOMA);
      break;
    case CORIZ:
      jj_consume_token(CORIZ);
      jj_consume_token(NUM);
      jj_consume_token(CORDER);
      jj_consume_token(PUNCOMA);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void typespecifer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      jj_consume_token(Int);
      break;
    case Void:
      jj_consume_token(Void);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fundeclaration() throws ParseException {
    typespecifer();
    jj_consume_token(ID);
    jj_consume_token(PARIZ);
    params();
    jj_consume_token(PARDER);
    compoundstmt();
  }

  static final public void params() throws ParseException {
    if (jj_2_3(2)) {
      paramlist();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Void:
        jj_consume_token(Void);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void paramlist() throws ParseException {
    param();
    paramlistPrima();
  }

  static final public void paramlistPrima() throws ParseException {
    label_3:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(OPCOMA);
      param();
      paramlistPrima();
    }
  }

  static final public void param() throws ParseException {
    typespecifer();
    jj_consume_token(ID);
    paramPre();
  }

  static final public void paramPre() throws ParseException {
    label_4:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(CORIZ);
      jj_consume_token(CORDER);
    }
  }

  static final public void compoundstmt() throws ParseException {
    jj_consume_token(LLAVIZ);
    localdeclarations();
    statementlist();
    jj_consume_token(LLAVDER);
  }

  static final public void localdeclarations() throws ParseException {
    localdeclarationsPrima();
  }

  static final public void localdeclarationsPrima() throws ParseException {
    label_5:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_5;
      }
      vardeclaration();
      localdeclarationsPrima();
    }
  }

  static final public void statementlist() throws ParseException {
    statementlistPrima();
  }

  static final public void statementlistPrima() throws ParseException {
    label_6:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_6;
      }
      statement();
      statementlistPrima();
    }
  }

  static final public void statement() throws ParseException {
    if (jj_2_8(2)) {
      expressionstmt();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLAVIZ:
        compoundstmt();
        break;
      case If:
        selectionstmt();
        break;
      case While:
        iterationstmt();
        break;
      case Return:
        returnstmt();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expressionstmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARIZ:
    case ID:
    case NUM:
      expression();
      jj_consume_token(PUNCOMA);
      break;
    case PUNCOMA:
      jj_consume_token(PUNCOMA);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void selectionstmt() throws ParseException {
    jj_consume_token(If);
    jj_consume_token(PARIZ);
    expression();
    jj_consume_token(PARDER);
    statement();
    selectionstmtPre();
  }

  static final public void selectionstmtPre() throws ParseException {
    label_7:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(Else);
      statement();
    }
  }

  static final public void iterationstmt() throws ParseException {
    jj_consume_token(While);
    jj_consume_token(PARIZ);
    expression();
    jj_consume_token(PARDER);
    statement();
  }

  static final public void returnstmt() throws ParseException {
    jj_consume_token(Return);
    returnstmtPre();
  }

  static final public void returnstmtPre() throws ParseException {
    if (jj_2_10(2)) {
      jj_consume_token(PUNCOMA);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARIZ:
      case ID:
      case NUM:
        expression();
        jj_consume_token(PUNCOMA);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expression() throws ParseException {
    if (jj_2_11(3)) {
      var();
      jj_consume_token(OPASIG);
      expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARIZ:
      case ID:
      case NUM:
        simpleExpression();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void var() throws ParseException {
    jj_consume_token(ID);
    varPre();
  }

  static final public void varPre() throws ParseException {
    label_8:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(CORIZ);
      expression();
      jj_consume_token(CORDER);
    }
  }

  static final public void simpleExpression() throws ParseException {
    additiveExpression();
    simpleExpressionPre();
  }

  static final public void simpleExpressionPre() throws ParseException {
    label_9:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_9;
      }
      relop();
      additiveExpression();
    }
  }

  static final public void relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPMENORIGUAL:
      jj_consume_token(OPMENORIGUAL);
      break;
    case OPMENOR:
      jj_consume_token(OPMENOR);
      break;
    case OPMAYOR:
      jj_consume_token(OPMAYOR);
      break;
    case OPMAYORIGUAL:
      jj_consume_token(OPMAYORIGUAL);
      break;
    case OPIGUALIGUAL:
      jj_consume_token(OPIGUALIGUAL);
      break;
    case OPDIF:
      jj_consume_token(OPDIF);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void additiveExpression() throws ParseException {
    term();
    additiveExpressionPrima();
  }

  static final public void additiveExpressionPrima() throws ParseException {
    label_10:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_10;
      }
      addop();
      term();
      additiveExpressionPrima();
    }
  }

  static final public void addop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPSUMA:
      jj_consume_token(OPSUMA);
      break;
    case OPRESTA:
      jj_consume_token(OPRESTA);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void term() throws ParseException {
    factor();
    termPrima();
  }

  static final public void termPrima() throws ParseException {
    label_11:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_11;
      }
      mulop();
      factor();
      termPrima();
    }
  }

  static final public void mulop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPMULTIPLICA:
      jj_consume_token(OPMULTIPLICA);
      break;
    case OPDIV:
      jj_consume_token(OPDIV);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARIZ:
      jj_consume_token(PARIZ);
      expression();
      jj_consume_token(PARDER);
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_16(2)) {
        var();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          call();
          break;
        case NUM:
          jj_consume_token(NUM);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void call() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(PARIZ);
    args();
    jj_consume_token(PARDER);
  }

  static final public void args() throws ParseException {
    label_12:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_12;
      }
      arglist();
    }
  }

  static final public void arglist() throws ParseException {
    expression();
    arglistPrima();
  }

  static final public void arglistPrima() throws ParseException {
    label_13:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(OPCOMA);
      expression();
      arglistPrima();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(PARIZ)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(LLAVIZ)) return true;
    if (jj_3R_51()) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(LLAVDER)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(CORIZ)) return true;
    if (jj_scan_token(CORDER)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(OPCOMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_24()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(CORIZ)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(CORIZ)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(OPASIG)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(PUNCOMA)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(Return)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(OPCOMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(While)) return true;
    if (jj_scan_token(PARIZ)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(Else)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_22()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(If)) return true;
    if (jj_scan_token(PARIZ)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(PARIZ)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(PUNCOMA)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x24000,0x24000,0x2200000,0x24000,0x4000,0x20012800,0x80a00000,0x80800000,0x80800000,0x80000,0x0,0x0,0x800000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x7c0,0xc,0x30,0x0,0x1,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[18];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
