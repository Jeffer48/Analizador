/* Generated By:JavaCC: Do not edit this line. Analizador.java */
    public class Analizador implements AnalizadorConstants {
        public static void main(String args[]) throws ParseException {
            Analizador analizador = new Analizador(System.in);analizador.Inicio();
    }

  static final public void Inicio() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case If:
        jj_consume_token(If);
        break;
      case Else:
        jj_consume_token(Else);
        break;
      case While:
        jj_consume_token(While);
        break;
      case Void:
        jj_consume_token(Void);
        break;
      case Main:
        jj_consume_token(Main);
        break;
      case Return:
        jj_consume_token(Return);
        break;
      case Int:
        jj_consume_token(Int);
        break;
      case Float:
        jj_consume_token(Float);
        break;
      case OPDIF:
        jj_consume_token(OPDIF);
        break;
      case OPASIG:
        jj_consume_token(OPASIG);
        break;
      case PUNCOMA:
        jj_consume_token(PUNCOMA);
        break;
      case OPCOMA:
        jj_consume_token(OPCOMA);
        break;
      case PARIZ:
        jj_consume_token(PARIZ);
        break;
      case PARDER:
        jj_consume_token(PARDER);
        break;
      case CORIZ:
        jj_consume_token(CORIZ);
        break;
      case CORDER:
        jj_consume_token(CORDER);
        break;
      case LLAVIZ:
        jj_consume_token(LLAVIZ);
        break;
      case LLAVDER:
        jj_consume_token(LLAVDER);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case NUMDEC:
        jj_consume_token(NUMDEC);
        break;
      case OPSUMA:
        jj_consume_token(OPSUMA);
        break;
      case OPRESTA:
        jj_consume_token(OPRESTA);
        break;
      case OPMULTIPLICA:
        jj_consume_token(OPMULTIPLICA);
        break;
      case OPDIV:
        jj_consume_token(OPDIV);
        break;
      case OPMENOR:
        jj_consume_token(OPMENOR);
        break;
      case OPMENORIGUAL:
        jj_consume_token(OPMENORIGUAL);
        break;
      case OPMAYOR:
        jj_consume_token(OPMAYOR);
        break;
      case OPMAYORIGUAL:
        jj_consume_token(OPMAYORIGUAL);
        break;
      case OPIGUALIGUAL:
        jj_consume_token(OPIGUALIGUAL);
        break;
      case SIMBNOVALIDO:
        jj_consume_token(SIMBNOVALIDO);
        break;
      case IDNOVALIDO:
        jj_consume_token(IDNOVALIDO);
        break;
      case NUMNOVALIDO:
        jj_consume_token(NUMNOVALIDO);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case If:
      case Else:
      case While:
      case Void:
      case Main:
      case Return:
      case Int:
      case Float:
      case OPDIF:
      case OPASIG:
      case PUNCOMA:
      case OPCOMA:
      case PARIZ:
      case PARDER:
      case CORIZ:
      case CORDER:
      case SIMBNOVALIDO:
      case IDNOVALIDO:
      case NUMNOVALIDO:
      case LLAVIZ:
      case LLAVDER:
      case ID:
      case NUM:
      case NUMDEC:
      case OPSUMA:
      case OPRESTA:
      case OPMULTIPLICA:
      case OPDIV:
      case OPMENOR:
      case OPMENORIGUAL:
      case OPMAYOR:
      case OPMAYORIGUAL:
      case OPIGUALIGUAL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffff800,0xfffff800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfff,0xfff,};
   }

  /** Constructor with InputStream. */
  public Analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analizador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analizador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analizador(AnalizadorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
