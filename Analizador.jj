options{
    //IGNORE_CASE=true ;
    //DEBUG_PARSER=true;
    //DEBUG_LOOKAHEAD=true;
    //DEBUG_TOKEN_MANAGER=true;
    //LOOKAHEAD = 10;
}

PARSER_BEGIN(Analizador)
import java.util.Hashtable;
    
    public class Analizador {
        static Hashtable HT = new Hashtable(); //Id y tipo
        static Hashtable HA = new Hashtable(); //Id y valor
        static boolean r = false;
        //static int valor = 0;
        static String valor = "";
        static String idA = "";

        public static void main(String args[]) throws ParseException {
            Analizador analizador = new Analizador(System.in);
            analizador.Inicio();
        }
    }
PARSER_END(Analizador)
SKIP : {  " "| "\t"| "\n"| "\r"}

SKIP:
{
 "/*":DentroComentario
}
<DentroComentario> SKIP:
{
"*/" : DEFAULT
}
<DentroComentario> MORE:
{
 <~ [ ] >
}

SKIP:
{
 "//":DentroComentario2
}
<DentroComentario2> SKIP:
{
"\n" : DEFAULT
}
<DentroComentario2> MORE:
{
 <~ [ ] >
}

TOKEN :{
    < If: ["i"]["f"] > {System.out.println("Encontre un if en la linea: " + matchedToken.beginLine);}
}

TOKEN :{
    < Else: ["e"]["l"]["s"]["e"] > {System.out.println("Encontre un else en la linea: " + matchedToken.beginLine);}
}

TOKEN :{
    < While: ["w"]["h"]["i"]["l"]["e"] > {System.out.println("Encontre un while en la linea: " + matchedToken.beginLine);}
}

TOKEN :{
    < Void: ["v"]["o"]["i"]["d"] > {System.out.println("Encontre un void en la linea: " + matchedToken.beginLine);}
}

TOKEN :{
    < Return: ["r"]["e"]["t"]["u"]["r"]["n"] > {System.out.println("Encontre un return en la linea: " + matchedToken.beginLine);}
}

TOKEN :{
    < Int: ["i"]["n"]["t"] > {System.out.println("Encontre un int en la linea: " + matchedToken.beginLine);}
}

TOKEN :{
    < Real: ["r"]["e"]["a"]["l"] > {System.out.println("Encontre un main en la linea: " + matchedToken.beginLine);}
}

TOKEN:
{
<OPDIF: "!="> {System.out.println("Encontre operador desigual"+ matchedToken.beginLine);}
}

TOKEN:
{
<OPASIG: "="> {System.out.println("Encontre operador asignativo"+ matchedToken.beginLine);}
}

TOKEN:
{
<PUNCOMA: ";"> {System.out.println("Encontre un punto y coma"+ matchedToken.beginLine);}
}

TOKEN:
{
<OPCOMA: ","> {System.out.println("Encontre una coma"+ matchedToken.beginLine);}
}

TOKEN:
{
<PARIZ: "("> {System.out.println("Encontre un parentesis izquierdo"+ matchedToken.beginLine);}
}

TOKEN:
{
<PARDER: ")"> {System.out.println("Encontre un parentesis derecho"+ matchedToken.beginLine);}
}

TOKEN:
{
<CORIZ: "["> {System.out.println("Encontre un corchete izquierdo"+ matchedToken.beginLine);}
}

TOKEN:
{
<CORDER: "]"> {System.out.println("Encontre un corchete derecho"+ matchedToken.beginLine);}
}

TOKEN:
{
<IDNOVALIDO: (["0"-"9"])+(["a"-"z"]|["A"-"Z"]){1}(["a"-"z"]|["A"-"Z"]|["0"-"9"])*> {System.out.println("Error lexico ID invalido en la linea: "+ matchedToken.beginLine);}
}

TOKEN:
{
<NUMNOVALIDO: ["."](["0"-"9"])+> {System.out.println("Error lexico numero decimal invalido en la linea: "+ matchedToken.beginLine);}
}

TOKEN:
{
<LLAVIZ: "{"> {System.out.println("Encontre una llave izquierda"+ matchedToken.beginLine);}
}

TOKEN:
{
<LLAVDER: "}"> {System.out.println("Encontre una llave derecha"+ matchedToken.beginLine);}
}

TOKEN:
{
<ID: (["a"-"z"]|["A"-"Z"]){1}(["a"-"z"]|["A"-"Z"]|["0"-"9"])*> {System.out.println("Encontre un ID "+image +" en la linea: "+ matchedToken.beginLine);}
}

TOKEN:
{
<NUM: ["0"-"9"](["0"-"9"])*> {System.out.println("Encontre un numero "+image +" en la linea: "+ matchedToken.beginLine);}
}

TOKEN:
{
<NUMDEC: ((["0"-"9"])+"."(["0"-"9"])+)> {System.out.println("Encontre un numero decimal "+image +" en la linea: "+ matchedToken.beginLine);}
}

TOKEN:{
    <OPSUMA: "+"> {System.out.println("Encontre un operador suma, en la linea:" + matchedToken.beginLine);}
}
TOKEN:{
    <OPRESTA: "-"> {System.out.println("Encontre un operador resta, en la linea:" + matchedToken.beginLine);}
}
TOKEN:{
    <OPMULTIPLICA: "*"> {System.out.println("Encontre un operador de multiplicacion, en la linea:" + matchedToken.beginLine);}
}
TOKEN:{
    <OPDIV: "/"> {System.out.println("Encontre un operador division, en la linea:" + matchedToken.beginLine);}
}
TOKEN:{
    <OPMENOR: "<"> {System.out.println("Encontre un operador menor que, en la linea:" + matchedToken.beginLine);}
}
TOKEN:{
    <OPMENORIGUAL: "<="> {System.out.println("Encontre un operador menor igual, en la linea:" + matchedToken.beginLine);}
}
TOKEN:{
    <OPMAYOR: ">"> {System.out.println("Encontre un operador mayor que, en la linea:" + matchedToken.beginLine);}   
}
TOKEN:{
    <OPMAYORIGUAL: ">="> {System.out.println("Encontre un operador mayor igual, en la linea:" + matchedToken.beginLine);}   
}
TOKEN:
{
    <OPIGUALIGUAL: "=="> {System.out.println("Encontre un operador igual igual, en la linea:" + matchedToken.beginLine);}   
}

SPECIAL_TOKEN:   
{
<SIMBNOVALIDO: ~[]> {System.out.println("Encontre un simbolo no valido, en la linea:" + matchedToken.beginLine);} 
}

void Inicio() :{}
{
    (program())+<EOF>
}

void program() :{}
{
    (declarationlist())
}

void declarationlist() :{}
{
    declaration() declarationlistPrima()
}

void declarationlistPrima() :{}
{
    (LOOKAHEAD(2) declaration() declarationlistPrima())*
}

void declaration() :{}
{
    LOOKAHEAD(3) vardeclaration() | fundeclaration()
}

void vardeclaration() :{String type = ""; String id = "";}
{
    type=typespecifer() <ID> {id=token.image; if(HT.containsKey(id)) System.out.println("La variable ya existe"); HT.put(id, type);} vardeclarationPre(id)
}

void vardeclarationPre(String id) :{int size = 0;}
{
    <PUNCOMA> | <CORIZ> <NUM> {size=Integer.parseInt(token.image);} <CORDER> <PUNCOMA> {HA.put(id, size);}
}

String typespecifer() :{}
{
    <Int> {return "int";} | <Void> {return "void";} | <Real> {return "real";}
}

void fundeclaration() :{String type = "";}
{
    type=typespecifer() <ID> <PARIZ> params() <PARDER> compoundstmt() {if(!r && type.equals("int")) System.out.println("Falta el return"); r=false;}
}

void params() :{}
{
    LOOKAHEAD(2) paramlist() | <Void>
}

void paramlist() :{}
{
    param() paramlistPrima()
}

void paramlistPrima() :{}
{
    (LOOKAHEAD(2) <OPCOMA> param() paramlistPrima())*
}

void param() :{String type = ""; String id = "";}
{
    type=typespecifer() <ID> {id=token.image; if(HT.containsKey(id)) System.out.println("La variable ya existe"); HT.put(id, type);} paramPre()
}

void paramPre() :{}
{
    (<CORIZ> <CORDER>)*
}

void compoundstmt() :{}
{
    <LLAVIZ> localdeclarations() statementlist() <LLAVDER>
}

void localdeclarations() :{}
{
    localdeclarationsPrima()
}

void localdeclarationsPrima() :{}
{
    (LOOKAHEAD(2) vardeclaration() localdeclarationsPrima())*   /* Posible error */
}

void statementlist() :{}
{
    statementlistPrima()
}

void statementlistPrima() :{}
{
    (LOOKAHEAD(2) statement() statementlistPrima())*
}

void statement() :{}
{
    LOOKAHEAD(2) expressionstmt() | compoundstmt() | selectionstmt() | iterationstmt() | returnstmt()
}

void expressionstmt() :{}
{
    expression() <PUNCOMA> | <PUNCOMA>
}

void selectionstmt() :{}
{
    <If> <PARIZ> expression() <PARDER> statement() selectionstmtPre()
}

void selectionstmtPre() :{}
{
    (LOOKAHEAD(2) <Else> statement())*
}

void iterationstmt() :{}
{
    <While> <PARIZ> expression() <PARDER> statement()
}

void returnstmt() :{}
{
    <Return> returnstmtPre()
}

void returnstmtPre() :{}
{
    LOOKAHEAD(2) <PUNCOMA> | LOOKAHEAD(8) expression() <PUNCOMA> {r=true;}
}

void expression() :{}
{
    LOOKAHEAD(8) var() <OPASIG> expression() 
    {
        String t = ""+HT.get(idA);
        if(t.equals("real")&&valor.contains(".")){double t2=Double.parseDouble(valor);}
        else if(t.equals("int")&&!valor.contains(".")){int t2=Integer.parseInt(valor);}
        else{System.out.println("Tipos de variables incompatibles");}
    } | 
    simpleExpression()
}

void var() :{String id = "";}
{
    <ID> {id=token.image; idA=id; if(!HT.containsKey(idA))System.out.println("La variable "+idA+" no existe");} varPre(id)
}

void varPre(String id) :{}
{
    (LOOKAHEAD(2) <CORIZ> expression() <CORDER> {
        int v=Integer.parseInt(""+HA.get(id))-1;

        if(v < Integer.parseInt(valor)){
            System.out.println("NullPointerException, arreglo: "+v+", "+valor);
        } 
    })*
}

void simpleExpression() :{}
{
    additiveExpression() simpleExpressionPre()
}

void simpleExpressionPre() :{}
{
    (LOOKAHEAD(2) relop() additiveExpression())*
}

void relop() :{}
{
    <OPMENORIGUAL> | <OPMENOR> | <OPMAYOR> | <OPMAYORIGUAL> | <OPIGUALIGUAL> | <OPDIF>
}

void additiveExpression() :{}
{
    term() additiveExpressionPrima()
}

void additiveExpressionPrima() : {}
{
    (LOOKAHEAD(2) addop() term() additiveExpressionPrima())*
}

void addop() :{}
{
    <OPSUMA> | <OPRESTA>
}

void term() :{}
{
    factor() termPrima()
}

void termPrima() :{}
{
    (LOOKAHEAD(2) mulop() factor() termPrima())*
}

String mulop() :{}
{
    <OPMULTIPLICA> {return "*";} | <OPDIV> {return "/";}
}

void factor() :{}
{
    <PARIZ> expression() <PARDER> | <NUM> {valor = token.image;} | <NUMDEC> {valor = token.image;} | LOOKAHEAD(2) call() | var()
}

void call() :{}
{
    <ID> <PARIZ> args() <PARDER>
}

void args() :{}
{
    (LOOKAHEAD(2) arglist())*
}

void arglist() :{}
{
    expression() arglistPrima()
}

void arglistPrima() :{}
{
    (LOOKAHEAD(2) <OPCOMA> expression() arglistPrima())*
}